from __future__ import absolute_import
import re
import json

from octoprint_WorkAreaOutliner.util import X, Y, Z, X_, Y_, Z_

def parse_bbox_from_metadata(logger, filepath):
    # Try to get the work area from metadata left by slicer program
    with open(filepath) as src_file:
        header = src_file.read(1024)  # Read first 1024 bytes for metadata

        # Search for Lightburn file metadata
        if (match := re.search(r'; Bounds:\s*([^\n]*)\s*', header)):
            logger.info("Using Work Area from Lightburn Metadata")
            # Looking for the following string pattern:
            # ; Bounds: X18.85 Y204.94 to X185.15 Y387.06
            
            coords = re.match(r'X(-?\d+.?\d*)\s*Y(-?\d+.?\d*)\s*to\s*X(-?\d+.?\d*)\s*Y(-?\d+.?\d*)', match.groups(1))

            return {
                X: (float(coords.groups(1)), float(coords.groups(3))),
                Y: (float(coords.groups(2)), float(coords.groups(4))),
                Z: (0, 0)
            }
        
        # Search for Fusion360 metadata
        elif (match := re.search(r';\s*Ranges table:\s*;\s*(X:.*)\s*;\s*(Y:.*)', header)):
            logger.info("Using Work Area from Fusion360 Metadata")
            # Looking for the following string pattern:
            #; Ranges table:
            #; X: Min=-0.5 Max=63.4 Size=63.9
            #; Y: Min=-0.5 Max=25.4 Size=25.9
            
            x_coords = re.match(r'; (X: Min=(-?\d+.?\d*) Max=(-?\d+.?\d*) Size=(-?\d+.?\d*))', match.groups(1))
            y_coords = re.match(r'; (Y: Min=(-?\d+.?\d*) Max=(-?\d+.?\d*) Size=(-?\d+.?\d*))', match.groups(2))

            return {
                X: (float(x_coords.groups(2)), float(x_coords.groups(3))),
                Y: (float(y_coords.groups(2)), float(y_coords.groups(3))),
                Z: (0, 0)
            }
        
        # Search for Slic3r (and derivatives) metadata
        elif (match := re.search(r'; generated by (Slic3r|(Super|Prusa)Slicer)\b', header)):
            logger.info(f"Using Work Area from {match.groups(1)} Metadata")
            # Looking for the following string pattern:
            # ; plater:{"center":[237.500000,149.999579,0.000000],"boundingbox_center":[237.500000,149.999579,4.500000],"boundingbox_size":[53.000000,56.424981,9.000000]}

            plater_line = re.search(r'; plater:\s*([^\n]*)\s*', header)
            plater = json.loads(plater_line.groups(1))

            center = plater["center"]
            bbox_center = plater["boundingbox_center"]
            bbox_size = plater["boundingbox_size"]

            return {
                X: (bbox_center[X_] - bbox_size[X_] / 2, bbox_center[X_] + bbox_size[X_] / 2),
                Y: (bbox_center[Y_] - bbox_size[Y_] / 2, bbox_center[Y_] + bbox_size[Y_] / 2),
                Z: (center[Z_], center[Z_] + bbox_size[Z_])
            }
        
        # TODO: Search for Cura metadata

        # TODO: Search for Other Slicer metadata

        else:
            logger.warning("Could not find slicer metadata. Unsupported program?")

    return False